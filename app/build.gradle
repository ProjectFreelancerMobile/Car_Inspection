apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

android {
    compileSdkVersion build_versions.compileSdk
    defaultConfig {
        applicationId build_versions.appId
        minSdkVersion build_versions.minSdk
        targetSdkVersion build_versions.targetSdk
        versionCode build_versions.versionCode
        versionName build_versions.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        renderscriptTargetApi build_versions.targetSdk
        renderscriptSupportModeEnabled true
        multiDexEnabled true
    }

    if (projects.hasProperty('devBuild')) {
        splits.splits.abi.enable = false
        splits.splits.density.enable = false
        splits.aaptOptions.cruncherEnabled = false
    }

    signingConfigs {
        Key {
            try {
                storeFile file(key_store.keystore)
                storePassword key_store.keystorePass
                keyAlias key_store.alias
                keyPassword key_store.aliasPass
            }
            catch (ignored) {
                throw new InvalidUserDataException("You should define KEYSTORE_PASSWORD and KEY_PASSWORD in gradle.properties.")
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
        }
        release {
            signingConfig signingConfigs.Key
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    key_store.proguard_rules, key_store.proguard_core, key_store.proguard_library, key_store.proguard_support
        }
    }

    flavorDimensions "content"
    productFlavors {
        uHotelDev {
            minSdkVersion build_versions.min_sdk
            //buildConfigField "String", "ACUCORE_PATH", '"https://tuk-api.acuteksolutions.com/api/v1.1.2/sc/"'
            buildConfigField "String", "ACUCORE_PATH", '"https://master-api.blendtv.net/api/v1.1.2/"'
            buildConfigField "String", "CLIENT_ID", '"cloud:acumw_android_device"'
            dimension "content"
        }
        uHotelRelease {
            buildConfigField "String", "ACUCORE_PATH", '"https://master-api.blendtv.net/api/v1.1.2/"'
            //buildConfigField "String", "ACUCORE_PATH", '"https://tuk-api.acuteksolutions.com/api/v1.1.2/sc/"'
            buildConfigField "String", "CLIENT_ID", '"cloud:acumw_android_device"'
            buildConfigField "String", "DEVICE_ID", '"toanthesingle"'
            dimension "content"
        }
    }

    lintOptions {
        textOutput "stdout"
        textReport true
        checkAllWarnings true
        warningsAsErrors true
        showAll true
        explainIssues true
        abortOnError false
        lintConfig file("$projectDir/lint.xml")
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/license/LICENSE.base64.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        maxProcessCount 4
        preDexLibraries false
        javaMaxHeapSize "8g"
    }
    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "CarInspection_v${defaultConfig.versionName}_${getDate()}.apk"
                outputFileName = fileName
            }
        }
    }
    sourceSets {
        main {
            res.srcDirs = [
                    'src/main/res-main',
                    file('src/main/res-screen')
                            .listFiles()
                            .each { res.srcDirs += it.path }
            ]
        }
    }
    androidExtensions {
        experimental = true
    }
    realm {
        kotlinExtensionsEnabled = true
    }

    dataBinding {
        enabled = true
    }

}

kotlin {
    experimental {
        coroutines "enable"
    }
}

ext {
    versions = [
            'javacv': '1.4.2',
            'ffmpeg': '4.0.1'
    ]
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':Core')
    implementation 'com.android.support:design:27.1.1'
    //picasso
    implementation 'com.squareup.picasso:picasso:2.71828'
    //FlowLayout
    implementation 'com.nex3z:flow-layout:1.2.2'
    // butter knife
    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation 'com.github.florent37:camerafragment:1.0.9'
    // Kotlin
    implementation deps.kotlin.stdlib
    implementation deps.multidex
    // Support libraries
    for (dependency in deps.support) {
        implementation dependency.value
    }
    //Core
    for (dependency in deps.core) {
        implementation dependency.value
    }
    //Work
    implementation deps.work.runtime
    // Architecture components
    for (dependency in deps.lifecycle) {
        implementation dependency.value
    }
    // Dagger 2
    for (dependency in deps.dagger) {
        implementation dependency.value
    }
    //Compiler
    for (dependency in deps.compiler) {
        kapt dependency.value
    }
    //Retrofit
    for (dependency in deps.retrofit) {
        implementation dependency.value
    }
    implementation(deps.libCore.ok_httpLogging, {
        exclude group: 'org.json', module: 'json'
    })
    /*implementation(deps.libCore.javacv, {
        exclude group: 'org.bytedeco.javacpp-presets'
    })*/
    implementation(deps.libCore.glide_recycler, {
        transitive = false
    })
    //Image Loading
    for (dependency in deps.glide) {
        implementation dependency.value
    }
    //Utils
    for (dependency in deps.utils) {
        implementation dependency.value
    }
    //Library
    for (dependency in deps.library) {
        implementation dependency.value
    }
    implementation(group: 'org.bytedeco', name: 'javacv-platform', version: versions.javacv) {
        exclude group: 'org.bytedeco.javacpp-presets'
    }
    implementation group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: "${versions.ffmpeg}-${versions.javacv}"
    implementation group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: "${versions.ffmpeg}-${versions.javacv}", classifier: 'android-arm'
    implementation group: 'org.bytedeco.javacpp-presets', name: 'ffmpeg', version: "${versions.ffmpeg}-${versions.javacv}", classifier: 'android-arm64'
    // Test
    debugImplementation deps.test.leakcanary
    debugImplementation deps.test.leakcanaryfragment
    debugImplementation deps.test.blockDebug
    releaseImplementation deps.test.leakcanary_no_op
    releaseImplementation deps.test.blockRelease
}

@SuppressWarnings("GrMethodMayBeStatic")
def getDate() {
    new Date().format('MMddyyyy')
}